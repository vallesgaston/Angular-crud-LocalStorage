{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TaskService {\n  constructor() {\n    this.tasks = [\n      //   {title:'write', description:'I have to write', hide:true},\n      //   {title:'create website', description:'I have to create website', hide:true}\n    ];\n  }\n  //  Obtener tareas \n  getTask() {\n    // if(localStorage.getItem(\"tasks\")===null){\n    //   return this.tasks;\n    // }else{\n    //   this.tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    //   return this.tasks;\n    // }\n    const storedTasks = localStorage.getItem(\"tasks\");\n    if (storedTasks === null) {\n      this.tasks = [];\n    } else {\n      this.tasks = JSON.parse(storedTasks);\n    }\n    return this.tasks;\n  }\n  //agregar tareas\n  addTask(task) {\n    // const storedTasks: string | null = localStorage.getItem(\"tasks\");\n    // let tasks: Task[] = storedTasks ? JSON.parse(storedTasks) : [];\n    // tasks.push(task);\n    // localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    this.tasks.push(task);\n    const storedTasks = localStorage.getItem(\"tasks\");\n    let tasks = [];\n    if (storedTasks !== null) {\n      tasks = JSON.parse(storedTasks);\n    }\n    tasks.push(task);\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    //   if(localStorage.getItem(\"task\") === null){\n    //   tasks.push(task);\n    //   localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    //  }else{\n    //   tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    //   tasks.push(task);\n    //   localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    //  }\n  }\n\n  deleteTask(task) {\n    for (let i = 0; i < this.tasks.length; i++) {\n      if (task == this.tasks[i]) this.tasks.splice(i, 1);\n      // localStorage.setItem(\"tasks\", JSON.stringify(this.tasks))\n    }\n  }\n  static #_ = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TaskService","constructor","tasks","getTask","storedTasks","localStorage","getItem","JSON","parse","addTask","task","push","setItem","stringify","deleteTask","i","length","splice","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Chaca\\OneDrive\\Escritorio\\angular-crud-localstorage\\src\\app\\services\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Task } from '../models/Task';\nimport { Title } from '@angular/platform-browser';\nimport { getLocaleTimeFormat } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  tasks: Task[];\n\n  constructor() {\n    this.tasks = [\n    //   {title:'write', description:'I have to write', hide:true},\n    //   {title:'create website', description:'I have to create website', hide:true}\n    ];\n   }\n   \n\n  //  Obtener tareas \n    getTask() { \n      // if(localStorage.getItem(\"tasks\")===null){\n      //   return this.tasks;\n      // }else{\n      //   this.tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n      //   return this.tasks;\n      // }\n\n      const storedTasks: string | null = localStorage.getItem(\"tasks\");\n\n      if (storedTasks === null) {\n        this.tasks = [];\n      } else {\n        this.tasks = JSON.parse(storedTasks);\n      }\n    \n      return this.tasks;\n\n   }\n\n   //agregar tareas\n   addTask(task: Task) {\n    \n    // const storedTasks: string | null = localStorage.getItem(\"tasks\");\n    // let tasks: Task[] = storedTasks ? JSON.parse(storedTasks) : [];\n    // tasks.push(task);\n    // localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n\n    this.tasks.push(task);\n\n    const storedTasks: string | null = localStorage.getItem(\"tasks\");\n    let tasks: Task[] = [];\n\n    if (storedTasks !== null) {\n    tasks = JSON.parse(storedTasks);\n    } \n\n   tasks.push(task);\n   localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n\n\n  //   if(localStorage.getItem(\"task\") === null){\n  //   tasks.push(task);\n  //   localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  //  }else{\n  //   tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n  //   tasks.push(task);\n  //   localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  //  }\n   }\n\n   deleteTask(task:Task){\n    for(let i=0; i<this.tasks.length; i++){\n      if(task == this.tasks[i])\n      this.tasks.splice(i, 1);\n    // localStorage.setItem(\"tasks\", JSON.stringify(this.tasks))\n    }\n   }\n   \n}\n"],"mappings":";AAQA,OAAM,MAAOA,WAAW;EAGtBC,YAAA;IACE,IAAI,CAACC,KAAK,GAAG;MACb;MACA;IAAA,CACC;EACF;EAGD;EACEC,OAAOA,CAAA;IACL;IACA;IACA;IACA;IACA;IACA;IAEA,MAAMC,WAAW,GAAkBC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAEhE,IAAIF,WAAW,KAAK,IAAI,EAAE;MACxB,IAAI,CAACF,KAAK,GAAG,EAAE;KAChB,MAAM;MACL,IAAI,CAACA,KAAK,GAAGK,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;;IAGtC,OAAO,IAAI,CAACF,KAAK;EAEpB;EAEA;EACAO,OAAOA,CAACC,IAAU;IAEjB;IACA;IACA;IACA;IAEA,IAAI,CAACR,KAAK,CAACS,IAAI,CAACD,IAAI,CAAC;IAErB,MAAMN,WAAW,GAAkBC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChE,IAAIJ,KAAK,GAAW,EAAE;IAEtB,IAAIE,WAAW,KAAK,IAAI,EAAE;MAC1BF,KAAK,GAAGK,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;;IAGhCF,KAAK,CAACS,IAAI,CAACD,IAAI,CAAC;IAChBL,YAAY,CAACO,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACM,SAAS,CAACX,KAAK,CAAC,CAAC;IAGrD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACC;;EAEAY,UAAUA,CAACJ,IAAS;IACnB,KAAI,IAAIK,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAACb,KAAK,CAACc,MAAM,EAAED,CAAC,EAAE,EAAC;MACpC,IAAGL,IAAI,IAAI,IAAI,CAACR,KAAK,CAACa,CAAC,CAAC,EACxB,IAAI,CAACb,KAAK,CAACe,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;MACzB;;EAED;EAAC,QAAAG,CAAA,G;qBArESlB,WAAW;EAAA;EAAA,QAAAmB,EAAA,G;WAAXnB,WAAW;IAAAoB,OAAA,EAAXpB,WAAW,CAAAqB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}